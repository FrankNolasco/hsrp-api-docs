{"version":3,"sources":["hook/useAxios.tsx","components/molecules/Controlador/index.tsx","components/atoms/CopyButton/styled.ts","components/atoms/CopyButton/index.tsx","components/molecules/Ruta/styled.ts","components/molecules/Ruta/index.tsx","components/organisms/styled.ts","components/organisms/DataTable.tsx","functions/lib.ts","components/molecules/Params/index.tsx","components/molecules/EndPoint/styled.ts","components/molecules/EndPoint/index.tsx","components/organisms/EndpointList.tsx","pages/Modulo/index.tsx"],"names":["useAxios","METHOD","URL","autoInit","params","useUsuario","usuario","useState","undefined","data","setData","error","setError","responseServerCode","setResponseServerCode","loading","setLoading","updateParams","newParams","resetValues","initAxiosInstance","instance","axios","create","baseURL","interceptors","request","use","axiosTokenInterceptor","getToken","token","idrol","sendRequest","a","post","initRequest","res","status","clientInitRequest","isReload","useEffect","Controladores","icon","label","procedureStore","inputParams","title","name","type","interfaceTS","outputParams","CopyButtonStyled","styled","div","CopyButton","value","useCopyClipboard","successDuration","isCopied","setCopied","onClick","className","RutaStyled","Ruta","method","url","TableStyled","Table","DataTable","dataSource","columnSource","expandable","renderList","responsive","columns","setColumns","processColumn","column","replaceAll","substring","toUpperCase","toLowerCase","columnName","renderMatch","filter","r","responsiveMatch","findOnResponsiveList","needRender","length","isResponsive","dataIndex","key","render","newColumns","map","bordered","size","pagination","TransformarParametrosAInterface","el","required","Params","extra","EndPointStyled","Card","EndPoint","hoverable","gap","controller","Controlador","EndpointList","api_reference","cargando","cols","colsWidthResponsive","style","color","routing","Modulo","api_modulo"],"mappings":"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","file":"static/js/21.cba00105.chunk.js","sourcesContent":["import axios, { AxiosInstance } from \"axios\";\r\nimport axiosTokenInterceptor from \"axios-token-interceptor\";\r\nimport { baseURL } from \"index\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useUsuario } from \"./globalUser\";\r\n\r\ntype T_Data = any | any[] | undefined;\r\ntype T_METHOD_HTTP = \"POST\" | \"GET\" | \"UPDATE\" | \"DELETE\" | \"INSERT\";\r\n\r\nexport const useAxios = (\r\n  METHOD: T_METHOD_HTTP,\r\n  URL: string,\r\n  autoInit: boolean = true,\r\n  params?: object\r\n) => {\r\n  const { usuario } = useUsuario()\r\n  const [data, setData] = useState<T_Data>(undefined);\r\n  const [error, setError] = useState(null);\r\n  const [responseServerCode, setResponseServerCode] = useState<number>();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const updateParams = (newParams : any) => {\r\n    params = newParams\r\n  }\r\n\r\n  const resetValues = () => {\r\n      setData(undefined)\r\n      setError(null)\r\n      setLoading(false)\r\n      setResponseServerCode(undefined)\r\n  }\r\n\r\n  const initAxiosInstance = (): AxiosInstance => {\r\n    const instance = axios.create({ baseURL });\r\n    instance.interceptors.request.use(\r\n      axiosTokenInterceptor({ getToken: () => `${usuario ? usuario.token : \"NO TENGO TOKEN\"} ${usuario ? usuario.idrol : 0}` })\r\n    );\r\n    return instance;\r\n  };\r\n\r\n  const sendRequest = async (instance: AxiosInstance) =>\r\n    await instance.post(URL, METHOD === \"GET\" ? null : params);\r\n\r\n  const initRequest = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const res = await sendRequest(initAxiosInstance());\r\n      setData(res.data)\r\n      setResponseServerCode(res.status)\r\n      setLoading(false);\r\n    } catch (error) {\r\n      setResponseServerCode(500)\r\n      setError(error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const clientInitRequest = (isReload : boolean = false) => {\r\n      !isReload && resetValues();\r\n      initRequest()\r\n  }\r\n\r\n  useEffect(() => {\r\n    autoInit && clientInitRequest()\r\n    return () => {\r\n      \r\n    }\r\n  }, [usuario, autoInit])\r\n\r\n\r\n  return { data, loading, responseServerCode, error, updateParams, clientInitRequest };\r\n};\r\n","\r\nimport { Item } from \"components/atoms\";\r\nimport { IController } from \"types/Interface\";\r\nimport { Params } from \"..\";\r\ninterface Props {\r\n  data: IController;\r\n}\r\n\r\nconst Controladores = ({ data }: Props) => {\r\n  return (\r\n    <div>\r\n      <Item icon=\"database\" label=\"Procedimiento Almacenado\">\r\n        {data.procedureStore}\r\n      </Item>\r\n      {data.inputParams && (\r\n        <Params\r\n          title=\"Parametros de entrada\"\r\n          name= {data.name}\r\n          type=\"INPUT\"\r\n          interfaceTS={data.inputParams.interfaceTS}\r\n          params={data.inputParams.params}\r\n        />\r\n      )}\r\n      {data.outputParams && (\r\n        <Params\r\n          title=\"Parametros de salida\"\r\n          name= {data.name}\r\n          type=\"OUTPUT\"\r\n          interfaceTS={data.outputParams.interfaceTS}\r\n          params={data.outputParams.params}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Controladores;\r\n","import styled from \"styled-components\";\r\nexport const CopyButtonStyled = styled.div`\r\n  position: relative;\r\n  color: #4de791;\r\n  > span {\r\n    position: absolute;\r\n    top: -25px;\r\n    left: -5px;\r\n  }\r\n  > .ant-btn {\r\n    border: 0;\r\n    > i {\r\n      font-size: 20px;\r\n    }\r\n  }\r\n\r\n  > .ant-btn:focus,\r\n  .ant-btn:active {\r\n    color: #4de791;\r\n  }\r\n`;\r\n","import { Button } from \"antd\";\r\nimport useCopyClipboard from \"react-use-clipboard\";\r\nimport { CopyButtonStyled } from \"./styled\";\r\n\r\ninterface Props {\r\n    value : string \r\n}\r\n\r\nconst CopyButton = ( { value } : Props) => {\r\n    const [ isCopied, setCopied ] = useCopyClipboard(value, {\r\n        successDuration: 1000,\r\n      });\r\n\r\n    return (\r\n        <CopyButtonStyled onClick={setCopied}>\r\n            <span>\r\n                { isCopied && \"¡Copiado!\"}\r\n            </span>\r\n            <Button type=\"primary\">\r\n                <i className=\"fa fa-copy\"></i>\r\n            </Button>\r\n        </CopyButtonStyled>\r\n    )\r\n}\r\n\r\nexport default CopyButton\r\n","import styled from \"styled-components\";\r\n\r\nexport const RutaStyled = styled.div`\r\n    border: 1px solid #303030;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding : 3px 10px; \r\n    background-color: #111;\r\n`","import CopyButton from \"components/atoms/CopyButton\";\r\nimport { RutaStyled } from \"./styled\"\r\ninterface Props {\r\n    method : \"POST\" | \"GET\" | \"UPDATE\" | \"HEAD\" | \"DELETE\"\r\n    url : string,\r\n    name: string\r\n}\r\n\r\nconst Ruta = ( { method , url, name } : Props ) => {\r\n\r\n    return (\r\n        <RutaStyled>\r\n            <span>\r\n                {method}\r\n            </span>\r\n            <span>\r\n                {url}\r\n            </span>\r\n            <CopyButton value={`export const API_${name} = \"${url}\"`} />\r\n        </RutaStyled>\r\n    )\r\n}\r\n\r\nexport default Ruta\r\n","import { Table } from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const TableStyled = styled(Table)`\r\n  * {\r\n    color: white;\r\n  }\r\n  .ant-table-tbody > .tr.ant-table-row:hover > * {\r\n    background: #111;\r\n  }\r\n  .ant-table-small .ant-table-thead > tr > th {\r\n    background-color: #1890ff;\r\n  }\r\n  .ant-table-thead > tr > th {\r\n    color: white;\r\n    background: #000;\r\n    border-bottom: 1px solid #303030;\r\n  }\r\n  .ant-table-tbody > tr > td,\r\n  .ant-table.ant-table-bordered > .ant-table-container,\r\n  .ant-table.ant-table-bordered > .ant-table-container > .ant-table-content > table > thead > tr > th, .ant-table.ant-table-bordered > .ant-table-container > .ant-table-header > table > thead > tr > th, .ant-table.ant-table-bordered > .ant-table-container > .ant-table-body > table > thead > tr > th, .ant-table.ant-table-bordered > .ant-table-container > .ant-table-content > table > tbody > tr > td, .ant-table.ant-table-bordered > .ant-table-container > .ant-table-header > table > tbody > tr > td, .ant-table.ant-table-bordered > .ant-table-container > .ant-table-body > table > tbody > tr > td, .ant-table.ant-table-bordered > .ant-table-container > .ant-table-content > table > tfoot > tr > th, .ant-table.ant-table-bordered > .ant-table-container > .ant-table-header > table > tfoot > tr > th, .ant-table.ant-table-bordered > .ant-table-container > .ant-table-body > table > tfoot > tr > th, .ant-table.ant-table-bordered > .ant-table-container > .ant-table-content > table > tfoot > tr > td, .ant-table.ant-table-bordered > .ant-table-container > .ant-table-header > table > tfoot > tr > td, .ant-table.ant-table-bordered > .ant-table-container > .ant-table-body > table > tfoot > tr > td {\r\n    border-color: #303030;\r\n  }\r\n`;\r\n","import { useEffect, useState } from \"react\";\r\nimport { TableStyled } from \"./styled\";\r\ninterface IRenderList {\r\n  name: string;\r\n  render: Function;\r\n}\r\n\r\ninterface IResponsiveList {\r\n  name: string;\r\n  responsive: string[];\r\n}\r\n\r\nexport interface DataTableProps {\r\n  dataSource: any[];\r\n  columnSource: string[];\r\n  renderList?: IRenderList[];\r\n  expandable?: any;\r\n  responsive?: IResponsiveList[];\r\n}\r\n\r\ninterface IColumn {\r\n  title: string;\r\n  dataIndex: string;\r\n  key: number | string;\r\n  render?: Function;\r\n  responsive?: string[];\r\n}\r\n\r\nfunction DataTable({\r\n  dataSource,\r\n  columnSource,\r\n  expandable,\r\n  renderList,\r\n  responsive,\r\n}: DataTableProps) {\r\n  const [columns, setColumns] = useState<IColumn[]>([]);\r\n  const findOnRenderList = (columnName: string) => {\r\n    return renderList ? renderList.filter((r) => r.name === columnName) : [];\r\n  };\r\n\r\n  const findOnResponsiveList = (columnName: string) => {\r\n    return responsive ? responsive.filter((r) => r.name === columnName) : [];\r\n  };\r\n\r\n  const processColumnsMap = (columsMap: string[]) => {\r\n    return columsMap.map(processColumn);\r\n  };\r\n\r\n  const processColumn = (column: string) : IColumn => {\r\n    let title: string = column.replaceAll(\"_\", \" \");\r\n    title = title.substring(0, 1).toUpperCase() + title.substring(1).toLowerCase();\r\n    const renderMatch = findOnRenderList(column);\r\n    const responsiveMatch = findOnResponsiveList(column);\r\n    const needRender = renderMatch.length > 0;\r\n    const isResponsive = responsiveMatch.length > 0;\r\n    return {\r\n      title,\r\n      dataIndex: column,\r\n      key: column,\r\n      render: needRender ? renderMatch[0].render : undefined,\r\n      responsive: isResponsive ? responsiveMatch[0].responsive : undefined,\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (columnSource.length > 0) {\r\n      const newColumns = processColumnsMap(columnSource);\r\n      setColumns(newColumns);\r\n    }\r\n    return () => {};\r\n    //eslint-disable-next-line\r\n  }, [columnSource]);\r\n\r\n  return (\r\n    <TableStyled bordered size=\"small\" {...expandable} dataSource={dataSource} columns={columns} pagination = {dataSource.length > 20} />\r\n  );\r\n}\r\n\r\nexport default DataTable;","import { IParams } from \"types/Interface\";\r\n\r\nexport const TransformarParametrosAInterface = (params: IParams[],name: string,type: \"INPUT\" | \"OUTPUT\") => {\r\n  return `export interface DEF_${name.replaceAll(/([a-z])([A-Z])/g,\"$1_$2\").toUpperCase()}_${type} {${params.map(\r\n    (el) => `${el.name}${!el.required ? \"?\" : \"\"} : ${el.type}`\r\n  )}}`;\r\n};\r\n","import { Item } from \"components/atoms\";\r\nimport CopyButton from \"components/atoms/CopyButton\";\r\nimport { DataTable } from \"components/organisms\";\r\nimport { TransformarParametrosAInterface } from \"functions/lib\";\r\nimport { Fragment } from \"react\";\r\nimport { IParams } from \"types/Interface\";\r\n\r\ninterface Props {\r\n  interfaceTS?: string;\r\n  params: IParams[];\r\n  title: string;\r\n  name: string;\r\n  type: \"INPUT\" | \"OUTPUT\"\r\n}\r\n\r\nconst Params = ({ interfaceTS, params, title, name, type }: Props) => {\r\n  return (\r\n    <Item\r\n      icon=\"angle-double-right\"\r\n      label={title}\r\n      extra={<CopyButton value={TransformarParametrosAInterface(params,name,type)} />}\r\n    >\r\n      <Item icon=\"\" label=\"- Interface TS\">\r\n        {`DEF_${name.replaceAll(/([a-z])([A-Z])/g,\"$1_$2\").toUpperCase()}_${type}`}\r\n      </Item>\r\n      <Fragment>\r\n        {params.length > 0 && (\r\n          <DataTable\r\n            columnSource={[\"name\", \"type\", \"required\"]}\r\n            dataSource={params}\r\n          />\r\n        )}\r\n      </Fragment>\r\n    </Item>\r\n  );\r\n};\r\n\r\nexport default Params;\r\n","import { Card } from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const EndPointStyled = styled(Card)`\r\n    background-color: #222;\r\n    border-color: #303030;\r\n    color : #c3c3c3;\r\n    .ant-table{ \r\n        background-color: #111;\r\n    }    \r\n`","import { Card } from \"antd\"\r\nimport { Item } from \"components/atoms\"\r\nimport { Column } from \"mylibs/util-sc\"\r\nimport { IRoutingConfig } from \"types/Interface\"\r\nimport { Controlador, Ruta } from \"..\"\r\nimport { EndPointStyled } from \"./styled\"\r\n\r\nconst EndPoint = ({data} : {data : IRoutingConfig}) => {\r\n    return (\r\n        <EndPointStyled hoverable bordered>\r\n            <Column gap=\"10px\">\r\n                <Item label=\"REFERENCIA:\">\r\n                    API_{data.controller.name.toUpperCase()}\r\n                </Item>\r\n                <Ruta method={data.method} url={data.url} name={data.controller.name.toUpperCase()}/>\r\n                <Controlador data={data.controller}/>\r\n            </Column>\r\n        </EndPointStyled>\r\n    )\r\n}\r\n\r\nexport default EndPoint\r\n","import EndPoint from \"components/molecules/EndPoint\";\r\nimport { Grid } from \"mylibs/util-sc\";\r\nimport { IApiReference } from \"types/Interface\";\r\n\r\ninterface Props {\r\n  api_reference: IApiReference;\r\n  cargando?: boolean;\r\n}\r\n\r\nconst EndpointList = ({ api_reference, cargando = true }: Props) => {\r\n  return (\r\n    <Grid gap=\"10px\" cols={2} responsive={true} colsWidthResponsive=\"100%\">\r\n      {cargando ? (\r\n        <span style={{ color: \"white\" }}>Cargando referencias...</span>\r\n      ) : api_reference ? (\r\n        api_reference.routing.map((el, key) => <EndPoint data={el} key={key} />)\r\n      ) : (\r\n        <span style={{ color: \"white\" }}>\r\n          No hay referencias disponibles...\r\n        </span>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default EndpointList;\r\n","import EndpointList from \"components/organisms/EndpointList\"\r\nimport { useAxios } from \"hook/useAxios\"\r\n\r\nconst Modulo = () => {\r\n    const api_modulo = useAxios(\"POST\",\"/api/references/modulo\")\r\n    return (\r\n        <div>\r\n            <EndpointList api_reference = {api_modulo.data} cargando={api_modulo.loading}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modulo\r\n"],"sourceRoot":""}